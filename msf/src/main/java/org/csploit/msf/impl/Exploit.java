package org.csploit.msf.impl;

import org.csploit.msf.api.License;
import org.csploit.msf.impl.module.ArchSet;
import org.csploit.msf.impl.module.PlatformList;
import org.csploit.msf.impl.module.Reference;
import org.csploit.msf.impl.module.Target;

/**
 * Represent an exploit module
 */
class Exploit extends Module implements org.csploit.msf.api.Exploit {
  private Target[] targets;
  private int defaultTarget = -1;

  public Exploit() {
    super();
  }

  // we may should use a Builder
  public Exploit(String name,
                 String description,
                 String version,
                 Author[] authors,
                 ArchSet arch,
                 PlatformList platform,
                 Reference[] references,
                 boolean privileged,
                 License license,
                 Target[] targets,
                 int defaultTarget
                 ) {
    super(name, description, version, authors, arch, platform, references, privileged, license);
    this.targets = targets;
    this.defaultTarget = defaultTarget;
  }

  @Override
  public String getType() {
    return "exploit";
  }

  protected void setTargets(Target[] targets) {
    this.targets = targets;
  }

  public Target[] getTargets() {
    return targets;
  }

  public Target getTarget() {
    String val = datastore.get("TARGET");

    if(val != null) {
      try {
        return targets[Integer.parseInt(val)];
      } catch (NumberFormatException | IndexOutOfBoundsException e) {
        // ignore
      }
    }

    if(defaultTarget >= 0 && defaultTarget < targets.length) {
      return targets[defaultTarget];
    }

    return null;
  }
}
